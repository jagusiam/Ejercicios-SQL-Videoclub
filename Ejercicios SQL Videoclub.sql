--EJERCICIO 1
SELECT * FROM PUBLIC.MOVIES;

--EJERCICIO 2
SELECT * FROM GENRES;

--EJERCICIO 3
SELECT * FROM PUBLIC.STUDIOS WHERE STUDIO_ACTIVE = 1;

--EJERCICIO 4
SELECT * FROM PUBLIC.MEMBERS 
ORDER BY MEMBER_DISCHARGE_DATE DESC LIMIT 20;

--EJERCICIO 5

--EJERCICIO 6
SELECT MOVIE_NAME, MOVIE_LAUNCH_DATE FROM PUBLIC.MOVIES
WHERE 
YEAR(MOVIE_LAUNCH_DATE) >= '2000'
AND 
MOVIE_NAME LIKE 'A%'
ORDER BY MOVIE_LAUNCH_DATE DESC;

--EJERCICIO 7
SELECT ACTOR_NAME, ACTOR_BIRTH_DATE FROM ACTORS 
WHERE MONTH(ACTOR_BIRTH_DATE) = 6;

--EJERCICIO 8
SELECT ACTOR_NAME, ACTOR_BIRTH_DATE FROM ACTORS 
WHERE MONTH(ACTOR_BIRTH_DATE) != 6
AND ACTOR_DEAD_DATE IS NULL;

--EJERCICIO 9
SELECT 
DIRECTOR_NAME, AGE
FROM 
(
SELECT 
DIRECTOR_NAME, DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) AS AGE,
DIRECTOR_DEAD_DATE
FROM DIRECTORS
)
WHERE AGE <= 50
AND DIRECTOR_DEAD_DATE IS NULL;

--EJERCICIO 10
SELECT 
ACTOR_NAME, AGE
FROM 
(
SELECT 
ACTOR_NAME, DATEDIFF(YEAR, ACTOR_BIRTH_DATE, TODAY()) AS AGE,
ACTOR_DEAD_DATE
FROM ACTORS
)
WHERE AGE < 50
AND ACTOR_DEAD_DATE IS NOT NULL;

--EJERCICIO 11
SELECT 
DIRECTOR_NAME, AGE
FROM 
(
SELECT 
DIRECTOR_NAME, DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) AS AGE,
DIRECTOR_DEAD_DATE
FROM DIRECTORS
)
WHERE AGE <= 40
AND DIRECTOR_DEAD_DATE IS NULL;

--EJERCICIO 12
SELECT 
AVG(AGE)
FROM 
(
SELECT 
DIRECTOR_NAME, DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) AS AGE,
DIRECTOR_DEAD_DATE
FROM DIRECTORS
)
WHERE DIRECTOR_DEAD_DATE IS NULL;

--EJERCICIO 13
SELECT 
AVG(AGE)
FROM 
(
SELECT 
ACTOR_NAME, DATEDIFF(YEAR, ACTOR_BIRTH_DATE, TODAY()) AS AGE,
ACTOR_DEAD_DATE
FROM ACTORS
)
WHERE ACTOR_DEAD_DATE IS NOT NULL;

--EJERCICIO 14
SELECT MOVIE_NAME, STUDIO_NAME FROM
MOVIES INNER JOIN STUDIOS ON
MOVIES.STUDIO_ID = STUDIOS.STUDIO_ID;

--EJERCICIO 15
SELECT DISTINCT MEMBER_NAME FROM MEMBERS 
INNER JOIN MEMBERS_MOVIE_RENTAL
ON MEMBERS.MEMBER_ID = MEMBERS_MOVIE_RENTAL.MEMBER_ID
WHERE YEAR(MEMBER_RENTAL_DATE) >= 2010 AND YEAR(MEMBER_RENTAL_DATE) <= 2015
AND MEMBERS_MOVIE_RENTAL.MOVIE_ID IS NOT NULL;

--EJERCICIO 16
SELECT NATIONALITY_NAME, COUNT(NATIONALITY_ID) AS PAIS
FROM NATIONALITIES
INNER JOIN MOVIES ON
NATIONALITIES.NATIONALITY_ID = MOVIES.NATIONALITY_ID
GROUP BY NATIONALITY_NAME;

--EJERCICIO 17
SELECT MOVIE_NAME AS DOCUMENTALES
FROM MOVIES
INNER JOIN GENRES ON
MOVIES.GENRE_ID = GENRES.GENRE_ID
WHERE MOVIES.GENRE_ID = 2;

SELECT MOVIE_NAME FROM PUBLIC.MOVIES 
INNER JOIN DIRECTORS ON
MOVIES.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
WHERE YEAR(DIRECTOR_BIRTH_DATE) >= 1980
AND DIRECTOR_DEAD_DATE IS NULL;


